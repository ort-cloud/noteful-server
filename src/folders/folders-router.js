const express = require("express");
const xss = require("xss");

const FoldersService = require("./folders-service");

const foldersRouter = express.Router();
const jsonParser = express.json();

//serialize folder in case of xss attacks
const serializeFolder = folder => ({
  folder_id: folder.folder_id,
  folder_name: xss(folder.folder_name),
  date_created: folder.date_created,
});

//get all folders and add a new folder
foldersRouter
  .route("/")
  .get((req, res, next) => {
    const knexInstance = req.app.get("db");

    FoldersService.getAllFolders(knexInstance)
      .then(folders => {
        res.json(folders.map(serializeFolder));
      })
      .catch(next);
  })
  .post(jsonParser, (req, res, next) => {
    const knexInstance = req.app.get("db");
    const {folder_name} = req.body;
    const newFolder = {folder_name};

    //folder name is required, id and date will be autogenerated
    if (!folder_name) {
      return res.status(400).json({
        error: {message: `Missing Folder Name in request body`},
      });
    }

    FoldersService.insertFolder(knexInstance, newFolder)
      .then(folder => {
        res
          .status(201)
          .location(req.originalUrl + `/${folder.id}`)
          .json(serializeFolder(folder));
      })
      .catch(next);
  });

//get, delete, or update a specific folder
foldersRouter
  .route("/:folder_id")
  .all((req, res, next) => {
    //error checking to see if folder exists before moving to route
    const knexInstance = req.app.get("db");
    const folderId = req.params.folder_id;

    FoldersService.getFolderById(knexInstance, folderId)
      .then(folder => {
        if (!folder) {
          return res.status(404).json({
            error: {message: `Folder doesn't exist`},
          });
        }

        res.folder = folder;
        next();
      })
      .catch(next);
  })
  .get((req, res, next) => {
    res.json(serializeFolder(res.folder));
  })
  .delete((req, res, next) => {
    const knexInstance = req.app.get("db");
    const folderToDelete = req.params.folder_id;

    FoldersService.deleteFolder(knexInstance, folderToDelete)
      .then(() => {
        res.status(204).end();
      })
      .catch(next);
  })
  .patch(jsonParser, (req, res, next) => {
    const knexInstance = req.app.get("db");
    const folderToUpdate = req.params.folder_id;
    const {folder_name} = req.body; //user can only change the folder name currently
    const updatedFolder = {folder_name};

    if (!folder_name) {
      return res.status(400).json({
        error: {message: `Request body must contain Folder Name`},
      });
    }

    FoldersService.updateFolder(knexInstance, folderToUpdate, updatedFolder)
      .then(() => {
        res.status(204).end();
      })
      .catch(next);
  });

module.exports = foldersRouter;
